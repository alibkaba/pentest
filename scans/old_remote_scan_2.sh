#!/bin/bash
################################################################################
## [Author]:
## Ali Kaba www.alibkaba.com
##------------------------------------------------------------------------------
## [Warning]:
## This tool may be used for legal purposes only.  Users take full
## responsibility for any actions performed using this tool.  The author accepts
## no liability for damage caused by this tool.  If you do not accept these
## condition then you are prohibited from using this tool.
##
## This script comes as-is with no promise of functionality or accuracy.
## Ensure that you have the appropriate legal permission before running it
## someone else's system.
##------------------------------------------------------------------------------
## [MIT License]:
##
## Copyright (c) [2017] [Ali Kaba]
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in
## all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
################################################################################

mainMENU(){
	echo "what do you want?"
	options=("ports" "dns" "quit")
	select opt in "${options[@]}"
	do
		case $opt in
			"ports")
				scanPORTS
				;;
			"dns")
				scanDNS
				;;
			"quit")
				exit 0
				;;
			*)
				echo invalid option
				;;
		esac
	done
}

# get network directory
networkDIR(){
	# network of the machine
	echo "what network is the machine in?"
	options=("public" "dev" "it" "admin" "others" "quit")
	select opt in "${options[@]}"
	do
		case $opt in
			"public")
				networkDIRECTORY=/root/OSCP/Network_Public
				break
				;;
			"dev")
				networkDIRECTORY=/root/OSCP/Network_Dev
				break
				;;
			"it")
				networkDIRECTORY=/root/OSCP/Network_IT
				break
				;;
			"admin")
				networkDIRECTORY=/root/OSCP/Network_Admin
				break
				;;
			"others")
				networkDIRECTORY=/root/OSCP/Others
				break
				;;
			"quit")
				exit 0
				;;
			*)
				echo invalid option
				;;
		esac
	done
	createFOLDER
	export fileTIMESTAMP=$(date +%Y-%m-%d.%H:%M)
	export networkDIRECTORY
}

# get an ip address
ipADDRESS(){
	echo "give me an ip address"
	read hostIP
	export hostIP
}

# scan ports functions
scanPORTS(){
	networkDIR
	ipADDRESS
	top_1k_tcp_ports &
	exit 0
}

# fingerprint top 1k tcp ports
top_1k_tcp_ports(){
	top_1k_tcp_ports_WORKING=$networkDIRECTORY/$folderNAME/top_1k_tcp_ports_WORKING_$fileTIMESTAMP.txt
	top_1k_tcp_ports=$networkDIRECTORY/$folderNAME/top_1k_tcp_ports_$fileTIMESTAMP.txt
	nmap -A $hostIP > $top_1k_tcp_ports_WORKING
	mv $top_1k_tcp_ports_WORKING $top_1k_tcp_ports
	top_1k_udp_ports &
	exit 0
}

# fingerprint top 1k udp ports
top_1k_udp_ports(){
	nmap -A -sU $hostIP > $networkDIRECTORY/$folderNAME/top_1k_udp_ports_WORKING_$fileTIMESTAMP.txt
	mv $networkDIRECTORY/$folderNAME/top_1k_udp_ports_WORKING_$fileTIMESTAMP.txt $networkDIRECTORY/$folderNAME/top_1k_udp_ports_$fileTIMESTAMP.txt
	all_tcp_ports &
	exit 0
}

# fingerprint all tcp ports
all_tcp_ports(){
	nmap -A -p- -T4 $hostIP > $networkDIRECTORY/$folderNAME/all_tcp_ports_WORKING_$fileTIMESTAMP.txt
	mv $networkDIRECTORY/$folderNAME/all_tcp_ports_WORKING_$fileTIMESTAMP.txt $networkDIRECTORY/$folderNAME/all_tcp_ports_$fileTIMESTAMP.txt
	all_udp_ports &
	exit 0
}

# fingerprint all udp ports
all_udp_ports(){
	nmap -p- -T4 -sU $hostIP > $networkDIRECTORY/$folderNAME/all_udp_ports_WORKING_$fileTIMESTAMP.txt
	mv $networkDIRECTORY/$folderNAME/all_udp_ports_WORKING_$fileTIMESTAMP.txt $networkDIRECTORY/$folderNAME/all_udp_ports_$fileTIMESTAMP.txt
	exit 0
}

createFOLDER(){
	# check to see if directory exists
	if [[ ! -d $networkDIRECTORY/$folderNAME ]]
	then
		mkdir $networkDIRECTORY/$folderNAME
	fi
}

# get a folder name
echo "give me a folder name?"
read folderNAME
export folderNAME
mainMENU
exit 0
